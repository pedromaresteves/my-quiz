{"version":3,"sources":["components/Header.js","components/Home.js","components/gameplay/Question.js","components/gameplay/Results.js","components/gameplay/Game.js","components/GameMenu.js","components/PageNotFound.js","components/App.js","serviceWorker.js","index.js"],"names":["Header","className","to","Home","props","id","onClick","resetFullState","sanitizer","dompurify","sanitize","alphabeticSort","a","b","nameA","toUpperCase","nameB","Question","currentQuestionNum","questions","currentQuestion","results","allAnswers","incorrect_answers","correct_answer","answersDiv","useRef","selectAnswer","e","answerBtns","Array","from","current","children","playerAnswers","playerData","answers","forEach","btn","classList","remove","target","textContent","updatePlayerData","add","sort","dangerouslySetInnerHTML","__html","question","ref","map","item","key","disabled","time","timeLeft","Results","correctAnswersNumber","getCorrectAnswerCount","name","length","colSpan","answer","indexOf","correctAnswersCounter","timeState4NextQuestion","isLastQuestion","standardQuestionTime","changedtimeData","timeRunning","gameOn","Game","useState","callApiCounter","setCallApiCounter","useEffect","resetTimeData","fetch","numberOfQuestions","then","response","json","data","response_code","updateQuestions","startTimerBtn","nextQuestion","newTimeState","questionTime","resetTimer","updateTime","handleTime","GameMenu","handleFormChanges","propertyToUpdate","newPropertyValue","value","Number","htmlFor","defaultValue","onChange","type","PageNotFound","timer","App","gameMode","categories","category","difficulty","setQuestions","setPlayerData","setTime","clearTimeout","countdown","newValue","objectWithNewValues","useCallback","setTimeout","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a2851512.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <header className=\"App-header\">\r\n      <Link className=\"not-normal-link\" to=\"/\">\r\n        <h1>Panther Quiz 2000</h1>\r\n      </Link>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction Home(props) {\r\n  return (\r\n    <div id=\"home\">\r\n      <Link to=\"/game-menu\">\r\n        <button onClick={props.resetFullState}>start quizz</button>\r\n      </Link>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","import React, { useRef } from \"react\";\r\nimport dompurify from 'dompurify';\r\nconst sanitizer = dompurify.sanitize;\r\n\r\nfunction Question(props) {\r\n  const currentQuestionNum = props.questions.currentQuestionNum;\r\n  const currentQuestion = props.questions.results[currentQuestionNum];\r\n  const allAnswers = [\r\n    ...currentQuestion.incorrect_answers,\r\n    currentQuestion.correct_answer,\r\n  ];\r\n  const answersDiv = useRef(null);\r\n\r\n  const selectAnswer = (e) => {\r\n    const answerBtns = Array.from(answersDiv.current.children);\r\n    const playerAnswers = props.playerData.answers;\r\n    answerBtns.forEach((btn) => {\r\n      btn.classList.remove(\"active-answer\");\r\n    });\r\n    playerAnswers[currentQuestionNum] = e.target.textContent;\r\n    props.updatePlayerData(\"answers\", playerAnswers);\r\n    e.target.classList.add(\"active-answer\");\r\n  };\r\n\r\n  allAnswers.sort(alphabeticSort);\r\n\r\n  return (\r\n    <div>\r\n      <h4 dangerouslySetInnerHTML={{__html: sanitizer(currentQuestion.question)}}></h4>\r\n      <div id=\"possible-answers-list\" ref={answersDiv}>\r\n        {allAnswers.map((item) => (\r\n          <button\r\n            key={sanitizer(item)}\r\n            className=\"answer-btn\"\r\n            disabled={!props.time.timeLeft}\r\n            onClick={selectAnswer}\r\n            dangerouslySetInnerHTML={{__html: sanitizer(item)}}\r\n          >\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst alphabeticSort = (a, b) => {\r\n  var nameA = a.toUpperCase();\r\n  var nameB = b.toUpperCase();\r\n  if (nameA < nameB) {\r\n    return -1;\r\n  }\r\n  if (nameA > nameB) {\r\n    return 1;\r\n  }\r\n  return 0;\r\n};\r\n\r\nexport default Question;\r\n","import React from \"react\";\r\nimport dompurify from 'dompurify';\r\nconst sanitizer = dompurify.sanitize;\r\n\r\nfunction Results(props) {\r\n  const correctAnswersNumber = getCorrectAnswerCount(\r\n    props.questions,\r\n    props.playerData\r\n  );\r\n  return (\r\n    <div id=\"results\">\r\n      <h1>Results</h1>\r\n      <h2>\r\n        {props.playerData.name} score: {correctAnswersNumber}/\r\n        {props.questions.results.length}\r\n      </h2>\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th colSpan=\"3\">Here are your results</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n            <th>Question</th>\r\n            <th>Correct Answer</th>\r\n            <th>{props.playerData.name}</th>\r\n          </tr>\r\n          {props.questions.results.map((item) => {\r\n            const answer =\r\n              props.playerData.answers[props.questions.results.indexOf(item)];\r\n            return (\r\n              <tr key={item.question}>\r\n                <td dangerouslySetInnerHTML={{__html: sanitizer(item.question)}}></td>\r\n                <td dangerouslySetInnerHTML={{__html: sanitizer(item.correct_answer)}}></td>\r\n                <td\r\n                  className={\r\n                    answer === item.correct_answer ? \"correct\" : \"incorrect\"\r\n                  }\r\n                  dangerouslySetInnerHTML={{__html: sanitizer(answer)}}\r\n                >\r\n                </td>\r\n              </tr>\r\n            );\r\n          })}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst getCorrectAnswerCount = (questions, playerData) => {\r\n  let correctAnswersCounter = 0;\r\n  questions.results.forEach((item) => {\r\n    const answer = playerData.answers[questions.results.indexOf(item)];\r\n    if (answer === item.correct_answer) correctAnswersCounter++;\r\n  });\r\n  return correctAnswersCounter;\r\n};\r\n\r\nexport { getCorrectAnswerCount, Results };\r\n","import React, { useRef, useState, useEffect } from \"react\";\r\nimport Question from \"./Question\";\r\nimport { Results } from \"./Results\";\r\n\r\nfunction Game(props) {\r\n  \r\n  let [callApiCounter, setCallApiCounter] = useState(0);\r\n  useEffect(() => {\r\n    if (callApiCounter > 0) return;\r\n    props.resetTimeData(true);\r\n    fetch(\r\n      `https://opentdb.com/api.php?amount=${props.questions.numberOfQuestions}`\r\n    )\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then((data) => {\r\n        if (data.response_code === 0) {\r\n          props.updateQuestions(\"results\", data.results);\r\n        }\r\n      });\r\n    setCallApiCounter(1);\r\n  }, [props, callApiCounter]);\r\n  const currentQuestionNum = props.questions.currentQuestionNum;\r\n  const startTimerBtn = useRef(null);\r\n  const startTimer = () => {\r\n    props.handleTime();\r\n    startTimerBtn.current.disabled = true;\r\n  };\r\n\r\n  const goToNextQuestion = () => {\r\n    let nextQuestion = currentQuestionNum + 1;\r\n    const isLastQuestion = nextQuestion === props.questions.results.length;\r\n    if (!props.playerData.answers[currentQuestionNum]) {\r\n      props.updatePlayerData(\"answers\", [...props.playerData.answers, null]);\r\n    }\r\n    const newTimeState = timeState4NextQuestion(\r\n      isLastQuestion,\r\n      props.questionTime\r\n    );\r\n    props.updateQuestions(\"currentQuestionNum\", nextQuestion);\r\n    props.resetTimer();\r\n    props.updateTime(newTimeState);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {props.time.gameOn ? (\r\n        <div>\r\n          <p>\r\n            Clock's ticking: <strong>{props.time.timeLeft}</strong>\r\n          </p>\r\n          <Question\r\n            questions={props.questions}\r\n            playerData={props.playerData}\r\n            time={props.time}\r\n            updatePlayerData={props.updatePlayerData}\r\n          />\r\n          <button className=\"next-question-btn\" onClick={goToNextQuestion}>\r\n            Next\r\n          </button>\r\n        </div>\r\n      ) : !props.questions.currentQuestionNum ? (\r\n        <div>\r\n          <h4>Press the button to start the game.</h4>\r\n          <button id=\"start-game\" onClick={startTimer} ref={startTimerBtn}>\r\n            Start Countdown\r\n          </button>\r\n          {props.time.timeRunning ? (\r\n            <p>You have {props.time.timeLeft} seconds to get ready</p>\r\n          ) : (\r\n            <p>You'll have 3 seconds to get ready</p>\r\n          )}\r\n        </div>\r\n      ) : (\r\n        <Results questions={props.questions} playerData={props.playerData} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nconst timeState4NextQuestion = (isLastQuestion, standardQuestionTime) => {\r\n  const changedtimeData = {\r\n    timeLeft: standardQuestionTime,\r\n    timeRunning: true,\r\n  };\r\n  if (isLastQuestion) {\r\n    changedtimeData.gameOn = false;\r\n    changedtimeData.timeRunning = false;\r\n  }\r\n  return changedtimeData;\r\n};\r\n\r\nexport default Game;\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nfunction GameMenu(props) {\r\n  const handleFormChanges = (e) => {\r\n    const propertyToUpdate = e.target.name;\r\n    let newPropertyValue = e.target.value;\r\n    if (propertyToUpdate === \"name\") {\r\n      return props.updatePlayerData(propertyToUpdate, newPropertyValue);\r\n    }\r\n    if (Number(newPropertyValue)) newPropertyValue = Number(newPropertyValue);\r\n    return props.updateQuestions(propertyToUpdate, newPropertyValue);\r\n  };\r\n  const setNewGame = () => {\r\n    props.resetTimeData(true);\r\n    return props.updateQuestions(\"currentQuestionNum\", 0);\r\n  };\r\n  return (\r\n    <div id=\"game-menu\">\r\n      <h2>Welcome to the Game Menu</h2>\r\n      <form>\r\n        <div>\r\n          <label htmlFor=\"name\">Insert your name </label>\r\n          <input\r\n            name=\"name\"\r\n            defaultValue={props.playerData.name}\r\n            onChange={handleFormChanges}\r\n          ></input>\r\n        </div>\r\n        <div>\r\n          <label htmlFor=\"numberOfQuestions\">Set Number Of Questions: </label>\r\n          <select\r\n            name=\"numberOfQuestions\"\r\n            defaultValue={props.questions.numberOfQuestions}\r\n            onChange={handleFormChanges}\r\n          >\r\n            <option value=\"5\">5</option>\r\n            <option value=\"10\">10</option>\r\n            <option value=\"15\">15</option>\r\n            <option value=\"20\">20</option>\r\n            <option value=\"30\">30</option>\r\n          </select>\r\n        </div>\r\n        <div className=\"form-group\">\r\n          <Link to=\"game\">\r\n            <button type=\"submit\" onClick={setNewGame}>\r\n              Create Game\r\n            </button>\r\n          </Link>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GameMenu;\r\n","import React from \"react\";\r\n\r\nfunction PageNotFound() {\r\n  return <p>Page Not Found</p>;\r\n}\r\n\r\nexport default PageNotFound;\r\n","import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport Header from \"./Header\";\r\nimport Home from \"./Home\";\r\nimport Game from \"./gameplay/Game\";\r\nimport GameMenu from \"./GameMenu\";\r\nimport PageNotFound from \"./PageNotFound\";\r\nimport \"../App.css\";\r\n\r\nlet timer;\r\n\r\nfunction App() {\r\n  const questionTime = 45;\r\n  const countdownTime = 3;\r\n  const [questions, setQuestions] = useState({\r\n    gameMode: \"default\",\r\n    categories: \"all\",\r\n    numberOfQuestions: 15,\r\n    currentQuestionNum: 0,\r\n    results: [\r\n      {\r\n        category: \"Entertainment: Video Games\",\r\n        type: \"multiple\",\r\n        difficulty: \"easy\",\r\n        question:\r\n          \"Half-Life by Valve uses the GoldSrc game engine, which is a highly modified version of what engine?\",\r\n        correct_answer: \"Quake Engine\",\r\n        incorrect_answers: [\"Doom Engine\", \"id Engine\", \"Source Engine\"],\r\n      },\r\n      {\r\n        category: \"Science & Nature\",\r\n        type: \"boolean\",\r\n        difficulty: \"easy\",\r\n        question: \"Igneous rocks are formed by excessive heat and pressure.\",\r\n        correct_answer: \"False\",\r\n        incorrect_answers: [\"True\"],\r\n      },\r\n    ],\r\n  });\r\n  const [playerData, setPlayerData] = useState({\r\n    name: \"Player 1\",\r\n    answers: [],\r\n  });\r\n  const [time, setTime] = useState({\r\n    timeLeft: questionTime,\r\n    timeRunning: false,\r\n    gameOn: false,\r\n  });\r\n  const resetTimer = () => {\r\n    clearTimeout(timer);\r\n  };\r\n\r\n  const resetTimeData = (countdown) => {\r\n    const changedtimeData = {\r\n      timeLeft: questionTime,\r\n      timeRunning: false,\r\n      gameOn: false,\r\n    };\r\n    if (countdown) changedtimeData.timeLeft = countdownTime;\r\n    updateTime(changedtimeData);\r\n    resetTimer();\r\n  };\r\n\r\n  const updatePlayerData = (propertyToUpdate, newValue) => {\r\n    return setPlayerData({\r\n      ...playerData,\r\n      [propertyToUpdate]: newValue,\r\n    });\r\n  };\r\n  const updateQuestions = (propertyToUpdate, newValue) => {\r\n    return setQuestions({\r\n      ...questions,\r\n      [propertyToUpdate]: newValue,\r\n    });\r\n  };\r\n  const updateTime = (objectWithNewValues) => {\r\n    setTime({ ...time, ...objectWithNewValues });\r\n  };\r\n\r\n  const handleTime = useCallback(() => {\r\n    timer = setTimeout(() => {\r\n      if (!time.timeLeft) {\r\n        if (!time.gameOn) {\r\n          setTime({\r\n            ...time,\r\n            timeLeft: questionTime,\r\n            gameOn: true,\r\n            timeRunning: true,\r\n          });\r\n        } else {\r\n          return setTime({\r\n            ...time,\r\n            timeLeft: 0,\r\n            timeRunning: false,\r\n          });\r\n        }\r\n      }\r\n      if (time.timeLeft) {\r\n        return setTime({\r\n          ...time,\r\n          timeLeft: --time.timeLeft,\r\n          timeRunning: true,\r\n        });\r\n      }\r\n    }, 1000);\r\n  }, [time]);\r\n  useEffect(() => {\r\n    if (time.timeRunning) return handleTime();\r\n  }, [time, handleTime]);\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      <Switch>\r\n        <Route exact path=\"/\">\r\n          <Home />\r\n        </Route>\r\n        <Route path=\"/game-menu\">\r\n          <GameMenu\r\n            playerData={playerData}\r\n            questions={questions}\r\n            updateQuestions={updateQuestions}\r\n            updatePlayerData={updatePlayerData}\r\n            resetTimeData={resetTimeData}\r\n          />\r\n        </Route>\r\n        <Route path=\"/game\">\r\n          <Game\r\n            playerData={playerData}\r\n            questions={questions}\r\n            updateQuestions={updateQuestions}\r\n            time={time}\r\n            questionTime={questionTime}\r\n            resetTimer={resetTimer}\r\n            updateTime={updateTime}\r\n            updatePlayerData={updatePlayerData}\r\n            handleTime={handleTime}\r\n            resetTimeData={resetTimeData}\r\n          />\r\n        </Route>\r\n        <Route>\r\n          <PageNotFound />\r\n        </Route>\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}